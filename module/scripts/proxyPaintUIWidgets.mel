/*
 *  proxyPaintUIWidgets.mel
 *
 */
 
global proc proxyPaintCreateVizUI(string $coln)
{
    floatSliderGrp -label "Show Voxel Threshold" -field true
    -ss 0.01 -fs 0.01
    -minValue 0.5 -maxValue 1.0
    -fieldMinValue 0.5 -fieldMaxValue 1.0
    -value 1.0
	-cw 1 130
	-p $coln
	-cc "proxyPaintSetShoVox" 
	proxyPaintSlider_ShoVoxThre;
	
    rowLayout -numberOfColumns 3
		-columnWidth 1 120
		-columnWidth 2 120
		-columnWidth 3 120
		-p $coln;
		
    checkBox -label "Show Grid"
        -value 1
        -cc "proxyPaintSetShoVizGrid(`checkBox -q -value proxyPaintCheck_shoVizGrid`)" 
        proxyPaintCheck_shoVizGrid;
        
        iconTextButton -label "Edit Ground" 
            -style "iconAndTextHorizontal" 
            -image "generic_red_light.xpm" 
            -c "proxyPaintSetEditVizGround"
            proxyPaintIcon_editVizGroung;
            
        iconTextButton -image "generic_land.xpm" 
        -style "iconOnly" 
        -c "proxyPaint_EditVizGround";	
        
    setParent ..;
        
    frameLayout -label "Statistics" 
        -cl true -cll true
        -p $coln;
    columnLayout -adj true;
    
        textFieldGrp -label "#Box"
            -text  ""
            ppnField_vizStatBox;
            
        textFieldGrp -label "#Instance"
            -text  ""
            ppnField_vizStatInstance;
            
        textFieldGrp -label "#Cell"
            -text  ""
            ppnField_vizStatCell;
            
        textFieldGrp -label "#Triangle"
            -text  ""
            ppnField_vizStatTriangle;
            
        textFieldGrp -label "Bound"
            -text  ""
            ppnField_vizStatBound;
    
    setParent ..; /// end of column
    setParent ..; /// end of frame
}

global proc proxyPaintUpdateExmpActive(string $com)
{
    string $ind = `iconTextCheckBox -q -ann $com`;
    int $stat =`iconTextCheckBox -q -v $com`; 
    if($stat == 1) {
        iconTextCheckBox -e -image "generic_checked.xpm" $com;
    } else {
        iconTextCheckBox -e -image "generic_unchecked.xpm" $com;
    }
    string $cmd = "proxyPaintToolContext -e -exs "+$ind+" \"active="+$stat+";\" "+ `currentCtx`;
    eval($cmd);
    proxyPaintOnActiveExampleChanges();
}

global proc proxyPaintUpdateExmpVisible(string $com)
{
    string $ind = `iconTextCheckBox -q -ann $com`;
    int $stat =`iconTextCheckBox -q -v $com`; 
    if($stat == 1) {
        iconTextCheckBox -e -image "generic_show.xpm" $com;
    } else {
        iconTextCheckBox -e -image "generic_hide.xpm" $com;
    }  
    string $cmd = "proxyPaintToolContext -e -exs "+$ind+" \"visible="+$stat+";\" "+ `currentCtx`;
    eval($cmd);
}

global proc proxyPaintSetDspTypImg(string $val, string $com)
{
    if($val == "0") {
        iconTextButton -e -image1 "proxyPaintTool_point.xpm" $com;
    } else {
        iconTextButton -e -image1 "proxyPaintTool_voxel.xpm" $com;
    }
}

global proc proxyPaintEditDspTyp(string $com)
{
    string $ind = `iconTextButton -q -ann $com`;
    string $imgi = `iconTextButton -q -image1 $com`;
    int $dsptyp = 0;
    if($imgi == "proxyPaintTool_point.xpm") {
        $dsptyp = 1;
    }
    
    string $cmd = "proxyPaintToolContext -e -exs "+$ind+" \"dsptyp="+$dsptyp+";\" "+ `currentCtx`;
    eval($cmd);
    
    if($dsptyp == 0) {
        proxyPaintSetDspTypImg("0", $com);
    } else {
        proxyPaintSetDspTypImg("1", $com);
    }
    proxyPaintOnActiveExampleChanges();
}

global proc proxyPaintEditPriority(string $com)
{
    string $ind = `intField -q -ann $com`;
    int $prior = `intField -q -v $com`;
    string $cmd = "proxyPaintToolContext -e -exs "+$ind+" \"priority="+$prior+";\" "+ `currentCtx`;
    eval($cmd);
    proxyPaintOnActiveExampleChanges();
}

global proc proxyPaintEditCanvasColor(string $com)
{
    string $ind = `canvas -q -ann $com`;
    
    float $initCol[] = `canvas -q -rgbValue $com`;
    
    string $result, $buffer[];
    $result = `colorEditor -rgbValue $initCol[0] $initCol[1] $initCol[2]`;
    tokenize($result, $buffer);
    if ("1" == $buffer[3]) {
        eval("canvas -e -rgbValue "+$buffer[0]+" "+$buffer[1]+" "+$buffer[2]+" "+$com);
        string $cmd = "proxyPaintToolContext -e -exs "+$ind+" \"dspcolor="+$buffer[0]+" "+$buffer[1]+" "+$buffer[2]+";\" "+ `currentCtx`;
        eval($cmd);
        $cmd = "proxyPaintToolContext -e -usc "+ `currentCtx`;
        eval($cmd);
        
    } else {
        print ("ColorEditor was dismissed\n");
    }

}

global proc proxyPaintSetAllExamplesActive(int $stat)
{
    string $iconstr = "generic_checked.xpm";
    if($stat != 1) {
        $iconstr = "generic_unchecked.xpm";
    }
    string $chds[] = `rowColumnLayout -q
        -ca pxpnExmpUIRow`;
    int $nchild = size($chds);    
    int $i;
    for($i=6;$i<$nchild;$i=$i+6) {
        int $v = `iconTextCheckBox -q -v $chds[$i]`;
        if($v == $stat) {
            continue;
        }
        iconTextCheckBox -e -v $stat $chds[$i];
        iconTextCheckBox -e -image $iconstr $chds[$i];
        int $index = ($i - 6)/6;
        string $cmd = "proxyPaintToolContext -e -exs "+$index+" \"active="+$stat+";\" "+ `currentCtx`;
        eval($cmd);
    }
    proxyPaintOnActiveExampleChanges();
}

global proc proxyPaintCheckAllExamplesActive(string $chk)
{
    int $stat = `iconTextCheckBox -q -v $chk`;
    print("\n proxyPaintCheckAllExamplesActive_v_"+$stat);
    if($stat == 1) {
        iconTextCheckBox -e -image "generic_checked.xpm" $chk;
        proxyPaintSetAllExamplesActive(1);
    } else {
        iconTextCheckBox -e -image "generic_unchecked.xpm" $chk;
        proxyPaintSetAllExamplesActive(0);
    }
}

global proc proxyPaintUpdateExmpUI(string $coln)
{
    string $chds[] = `rowColumnLayout -q
        -ca pxpnExmpUIRow`;
    string $achd;
    for($achd in $chds) {
        deleteUI -control $achd;
    }
    
    string $stats[] = proxyPaintGetExampleStats();
        
    int $nexmps = size($stats) / 12;
    if($nexmps < 1) {
        return;   
    }
    
    string $allExmpActiveCheck = `iconTextCheckBox -v 0 
            -p pxpnExmpUIRow
            -style "iconOnly"
            -w 24 -mw 0
            -h 24 -mh 0
            -image "generic_unchecked.xpm"`;
           
    string $allExmpActiveCheckCC = "proxyPaintCheckAllExamplesActive(\""
                                + $allExmpActiveCheck + "\")";
    
    iconTextCheckBox -e -cc $allExmpActiveCheckCC $allExmpActiveCheck;
            
    text -l "All" -al left -p pxpnExmpUIRow;
    text -l "" -p pxpnExmpUIRow;
    text -l "" -p pxpnExmpUIRow;
    text -l "" -p pxpnExmpUIRow;
    text -l "" -p pxpnExmpUIRow;
    
    int $index;
    for ($index = 0; $index < $nexmps; $index++) {
        
        int $iBegin = $index * 12;
        int $iEnd = $iBegin + 12;
        
        string $name = proxyPaintGetExmpName($stats, $iBegin, $iEnd);
        int $bActive = proxyPaintGetExmpBoolStat($stats, ".is_active", $iBegin, $iEnd);
        int $bVisible = proxyPaintGetExmpBoolStat($stats, ".is_visible", $iBegin, $iEnd);
        string $scolor = proxyPaintGetExmpVec3Stat($stats, ".dsp_color", $iBegin, $iEnd);
        string $sPriority = proxyPaintGetExmpIntStat($stats, ".priority", $iBegin, $iEnd);
        string $sDspType = proxyPaintGetExmpIntStat($stats, ".dsp_type", $iBegin, $iEnd);
        
        string $exmpActiveCheckName = "pxpnUICheckExmpActive"+$index;
        string $exmpActiveCheck = `iconTextCheckBox -v $bActive 
            -ann $index
            -p pxpnExmpUIRow
            -style "iconOnly"
            -w 24 -mw 0
            -h 24 -mh 0
            -image "generic_checked.xpm" 
            $exmpActiveCheckName`;
            
        if($bActive) {
            iconTextCheckBox -e -image "generic_checked.xpm" 
            $exmpActiveCheck;
        } else {
            iconTextCheckBox -e -image "generic_unchecked.xpm" 
            $exmpActiveCheck;
        }
        
        string $exmpActiveCC = "proxyPaintUpdateExmpActive(\""+$exmpActiveCheck+"\")";
        
        iconTextCheckBox -e -cc $exmpActiveCC $exmpActiveCheck;
        
        textField -text $name 
            -w 152
            -p pxpnExmpUIRow
            -ed off; 
         
        string $exmpVisibleCheckName = "pxpnUICheckExmpVisible"+$index;
        string $exmpVisibleCheck = `iconTextCheckBox -v $bVisible 
            -ann $index
            -p pxpnExmpUIRow
            -style "iconOnly"
            -w 24 -mw 0
            -h 24 -mh 0
            -image "generic_show.xpm"
            $exmpVisibleCheckName`;
        
        if($bVisible) {
            iconTextCheckBox -e -image "generic_show.xpm" 
            $exmpVisibleCheck;
        } else {
            iconTextCheckBox -e -image "generic_hide.xpm" 
            $exmpVisibleCheck;
        }
        
        string $exmpActiveCC = "proxyPaintUpdateExmpVisible(\""+$exmpVisibleCheck+"\")";
        
        iconTextCheckBox -e -cc $exmpActiveCC $exmpVisibleCheck;
        
        string $exmpPriorityField = `intField -w 48
            -ann $index
            -p pxpnExmpUIRow
            -minValue 1 -maxValue 100 -value 1`;
            
        eval("intField -e -v "+$sPriority+" "+$exmpPriorityField);
        
        string $exmpPriorityCC = "proxyPaintEditPriority(\""+$exmpPriorityField+"\")";
        
        intField -e -cc $exmpPriorityCC $exmpPriorityField;
        
        string $exmpColorCanvasName = `canvas -rgbValue 0 0 1
            -ann $index
            -p pxpnExmpUIRow
            -width 24 -height 22`;
            
        eval("canvas -e -rgbValue "+ $scolor+" "+$exmpColorCanvasName);
        
        string $exmpColorPC = "proxyPaintEditCanvasColor(\""+$exmpColorCanvasName+"\")";
        
        canvas -e -pc $exmpColorPC $exmpColorCanvasName;
        
        if($index < 1) {
            text -l "" -p pxpnExmpUIRow;
        } else {
            string $exmpDspTypeField = `iconTextButton -st "iconOnly" -w 24
            -ann $index
            -w 24 -mw 0
            -h 24 -mh 0
            -p pxpnExmpUIRow`;
        
            proxyPaintSetDspTypImg($sDspType, $exmpDspTypeField);
            
            string $exmpDspTypCC = "proxyPaintEditDspTyp(\""+$exmpDspTypeField+"\")";
            iconTextButton -e -c $exmpDspTypCC $exmpDspTypeField;
        
        }
    }
    proxyPaintOnActiveExampleChanges();
}

global proc proxyPaintCreateExmpUI(string $coln)
{
    rowColumnLayout -p $coln
        -numberOfColumns 6
        -cw 1 26
        -cs 1 2
        -cw 2 154
        -cs 2 2
        -cw 3 26
        -cs 3 2
        -cw 4 52
        -cs 4 2
        -cw 5 26
        -cs 5 2
        -cw 6 26
        -cs 6 2
        pxpnExmpUIRow;
    setParent ..;   
}

global proc proxyPaintCreateGroundUI(string $coln)
{
    rowColumnLayout -numberOfColumns 3
        -columnWidth 1 140
		-columnWidth 2 140
		-columnWidth 3 140
		-p $coln;
		
    iconTextButton -label "Select Samples"
        -style "iconAndTextHorizontal" 
        -image1 "proxyPaintTool_face.xpm"  
        -c "proxyPaintSetOpt(9)";
        
    iconTextButton -label "Shuffle" 
        -image1 "generic_shuffle.xpm" 
        -style "iconAndTextHorizontal" 
        -c "proxyPaintSetOpt(108)";
        
    iconTextButton -label "Discard" 
        -style "iconAndTextHorizontal" 
        -image1 "generic_discard.png" 
        -c "proxyPaintSetOpt(103)";
        
    iconTextButton -label "Select by View" 
        -image1 "generic_eye.xpm" 
        -style "iconAndTextHorizontal" 
        -c "proxyPaintDoSelectSampleByView";
        
    setParent ..;
    
    rowLayout -numberOfColumns 2
        -columnWidth2 120 120
        -p $coln;
        
        text -l "#Visible";
        intField -value 0
            proxyPaintFld_sampleCount;
    setParent ..;
            
    floatSliderGrp -label "Sample Portion" 
        -ss 0.01 -fs 0.01
        -minValue 0.0003 -maxValue 0.9997
        -field true -fieldMinValue 0.0003 -fieldMaxValue 0.9997
        -value 0.8
        -cw 1 130
        -cc "proxyPaintSetFilterPortion(`floatSliderGrp -q -value proxyPaintSlider_filterPortion`)" 
        -p $coln
        proxyPaintSlider_filterPortion;
        
        
    frameLayout -label "Image Sampler" 
        -cl true -cll true
        -p $coln;
    columnLayout -adj true;

    textFieldGrp -label "File Name"
        -text  ""
        -cc "proxyPaintTextField_setSampleFileName"
        proxyPaintTextField_samplerFileName;
        
    iconTextButton -label "Open EXR Image File" 
        -image1 "proxyPaintTool_imageFile.xpm" 
        -style "iconAndTextHorizontal" 
        -c "proxyPaint_openFileAsImageSampler";

        setParent ..; /// end of column
        setParent ..; /// end of frame
                
    frameLayout -label "3D Noise" 
        -cl true -cll true
        -p $coln;
    columnLayout -adj true;

    floatSliderGrp -label "Level" -field true
        -ss 0.01 -fs 0.01
    -minValue 0.0 -maxValue 1.0
    -fieldMinValue 0.0 -fieldMaxValue 1.0
    -value 0.5
	-cw 1 130
	-cc "proxyPaintSetNoise3dLevel(`floatSliderGrp -q -value proxyPaintSlider_noise3dLevel`)" 
	proxyPaintSlider_noise3dLevel;
	
floatSliderGrp -label "Frequency" -field true
    -ss 0.01 -fs 0.01
    -minValue 0.1 -maxValue 10.0
    -fieldMinValue 0.01 -fieldMaxValue 100.0
    -value 1.0
	-cw 1 130
	-cc "proxyPaintSetNoise3dFrequency(`floatSliderGrp -q -value proxyPaintSlider_noise3dFrequency`)" 
	proxyPaintSlider_noise3dFrequency;
	
floatSliderGrp -label "Lacunarity" -field true
    -ss 0.01 -fs 0.01
    -minValue 1.1 -maxValue 4.0
    -fieldMinValue 1.01 -fieldMaxValue 8.0
    -value 1.5
	-cw 1 130
	-cc "proxyPaintSetNoise3dLacunarity(`floatSliderGrp -q -value proxyPaintSlider_noise3dLacunarity`)" 
	proxyPaintSlider_noise3dLacunarity;
	
intSliderGrp -label "Octaves" -field true
    -minValue 1 -maxValue 10
    -fieldMinValue 1 -fieldMaxValue 16
    -value 4
	-cw 1 130
	-cc "proxyPaintSetNoise3dOctave(`intSliderGrp -q -value proxyPaintSlider_noise3dOctave`)" 
	proxyPaintSlider_noise3dOctave;
	
floatSliderGrp -label "Gain" -field true
    -ss 0.01 -fs 0.01
    -minValue 0.05 -maxValue 0.95
    -fieldMinValue 0.05 -fieldMaxValue 0.95
    -value 0.5
	-cw 1 130
	-cc "proxyPaintSetNoise3dGain(`floatSliderGrp -q -value proxyPaintSlider_noise3dGain`)" 
	proxyPaintSlider_noise3dGain;
	
floatFieldGrp -numberOfFields 3
    -label "Origin"
    -cw 1 130
    -value1 0.5 -value2 0.5 -value3 0.5
    proxyPaintField_noise3dOrigin;
    
button -label "Change Randomly" -c "proxyPaintSetNoise3dOrigin";
    
setParent ..; /// end of column
setParent ..; /// end of frame
}

global proc proxyPaintCreateEditUI(string $coln)
{		  
    frameLayout -l "Brush" 
        -cl false -cll true -p $coln;
    columnLayout -adj true;
    
    floatSliderGrp -label "Radius" -field true
        -ss 0.01 -fs 0.01
    -minValue 0.01 -maxValue 1000.0
    -fieldMinValue 0.01 -fieldMaxValue 500000.0
    -value 10.0
	-cw 1 130
	-cc "proxyPaintSetBRadius(`floatSliderGrp -q -value proxyPaintSlider_BRad`)" proxyPaintSlider_BRad;

	floatSliderGrp -label "Weight" -field true
	    -ss 0.01 -fs 0.01
    -minValue 0.01 -maxValue 1.0
    -fieldMinValue 0.01 -fieldMaxValue 1.0
    -value 0.8
	-cw 1 130
	-cc "proxyPaintSetBWeight(`floatSliderGrp -q -value proxyPaintSlider_BWei`)" proxyPaintSlider_BWei;

	floatSliderGrp -label "Fall off" -field true
	    -ss 0.01 -fs 0.01
    -minValue 0.0 -maxValue 2.0
    -fieldMinValue 0.0 -fieldMaxValue 2.0
    -value 0.5
	-cw 1 130
	-cc "proxyPaintSetBrushFalloff(`floatSliderGrp -q -value proxyPaintSlider_BFalloff`)" 
	proxyPaintSlider_BFalloff;
	
	setParent ..; /// end of column
	setParent ..; /// end of frame
	
	frameLayout -l "Create" 
	-cl false -cll true -p $coln;
		columnLayout -adj true;
		
    rowColumnLayout -numberOfColumns 3
		-columnWidth 1 120
		-columnWidth 2 120
		-columnWidth 3 120;
		
        iconTextButton -label "Flood" 
            -style "iconAndTextHorizontal" 
            -image1 "proxyPaintTool_flood.xpm" 
            -c "proxyPaintDoFlood";
         
        iconTextButton -label "Grow" 
            -style "iconAndTextHorizontal" 
            -image1 "proxyPaintTool_create.xpm" 
            -c "proxyPaintSetOpt(11)";
            
    setParent ..;  
    
    checkBox -label "Along Face Normal" 
            -cc "proxyPaintSetALN(`checkBox -q -value proxyPaintSlider_ALN`)" 
            proxyPaintSlider_ALN;

    floatSliderGrp -label "Margin Min"
        -ss 0.01 -fs 0.01
            -minValue 0.1 -maxValue 100.0
             -field true
            -fieldMinValue 0.1 -fieldMaxValue 10000.0
            -value 0.1
            -cw 1 130
            -cc "proxyPaintSetMinMargin(`floatSliderGrp -q -value proxyPaint_minMarginSlider`)" 
            proxyPaint_minMarginSlider;
        
    floatSliderGrp -label "Margin Max"
        -ss 0.01 -fs 0.01
            -minValue 0.1 -maxValue 100.0
             -field true
            -fieldMinValue 0.1 -fieldMaxValue 10000.0
            -value 0.1
            -cw 1 130
            -cc "proxyPaintSetMaxMargin(`floatSliderGrp -q -value proxyPaint_maxMarginSlider`)" 
            proxyPaint_maxMarginSlider;
            
    floatSliderGrp -label "Scale Min"
        -ss 0.01 -fs 0.01
            -minValue 0.1 -maxValue 2.0
            -field true
            -fieldMinValue 0.01 -fieldMaxValue 20.0
            -value 1.0
            -cw 1 130
            -cc "proxyPaintSetScaleMin(`floatSliderGrp -q -value proxyPaintSlider_ScaleMin`)" 
            proxyPaintSlider_ScaleMin;
            
    floatSliderGrp -label "Scale Max"
        -ss 0.01 -fs 0.01
            -minValue 0.1 -maxValue 2.0
            -field true
            -fieldMinValue 0.01 -fieldMaxValue 20.0
            -value 1.0
            -cw 1 130
            -cc "proxyPaintSetScaleMax(`floatSliderGrp -q -value proxyPaintSlider_ScaleMax`)" 
            proxyPaintSlider_ScaleMax;
            
    floatSliderGrp -label "Rotate Noise" -field true
        -ss 0.01 -fs 0.01
        -minValue 0.0 -maxValue 1.0
        -fieldMinValue 0.0 -fieldMaxValue 1.0
        -value 0.1
        -cw 1 130
        -cc "proxyPaintSetRotateNoise(`floatSliderGrp -q -value proxyPaintSlider_rotateNoise`)" 
        proxyPaintSlider_rotateNoise;
        
    floatSliderGrp -label "Zenith Noise" -field true
        -ss 0.01 -fs 0.01
        -minValue 0.0 -maxValue 1.0
        -fieldMinValue 0.0 -fieldMaxValue 1.0
        -value 0.5
        -cw 1 130
        -cc "proxyPaintSetZenithNoise(`floatSliderGrp -q -value proxyPaintSlider_zenithNoise`)" 
        proxyPaintSlider_zenithNoise;
            
        checkBox -label "Multiple Create"
            -value 1
            -cc "proxyPaintSetMultiCreate(`checkBox -q -value proxyPaintCheck_multiCreate`)" 
            proxyPaintCheck_multiCreate;

    setParent ..;
	setParent ..;
	
	frameLayout -l "Edit" 
	-cl false -cll true -p $coln;
    rowColumnLayout -numberOfColumns 3
		-columnWidth 1 140
		-columnWidth 2 140
		-columnWidth 3 140;
		
    iconTextButton -label "Select" 
        -style "iconAndTextHorizontal" -image1 "proxyPaintTool_select.xpm" -c "proxyPaintSetOpt(2)";
    iconTextButton -label "Discard" 
        -style "iconAndTextHorizontal" -image1 "generic_discard.png" -c "proxyPaintSetOpt(104)";
    iconTextButton -label "Erase" 
        -style "iconAndTextHorizontal" -image1 "proxyPaintTool_erase.xpm" -c "proxyPaintSetOpt(1)";
	iconTextButton -style "iconAndTextHorizontal"
        -image1 "proxyPaintTool_bundle_move.xpm"
        -label "Bundle Translate" 
        -c "proxyPaintSetOpt(21)";
        
    iconTextButton -style "iconAndTextHorizontal" 
        -image1 "proxyPaintTool_bundle_rotate.xpm"
        -label "Bundle Rotate" 
        -c "proxyPaintSetOpt(20)";
        
    iconTextButton -style "iconAndTextHorizontal" 
        -image1 "proxyPaintTool_bundle_resize.xpm"
        -label "Bundle Resize" 
        -c "proxyPaintSetOpt(19)";
	
    iconTextButton  -label "Move" 
        -style "iconAndTextHorizontal" 
        -image1 "proxyPaintTool_move.xpm"
        -c "proxyPaintSetOpt(4)";
        
    iconTextButton  -label "Scale" 
        -style "iconAndTextHorizontal" 
        -image1 "proxyPaintTool_scale.xpm"
        -c "proxyPaintSetOpt(3)";

    iconTextButton -label "RotateY" 
        -style "iconAndTextHorizontal" 
        -image1 "proxyPaintTool_rotateY.xpm" 
        -c "proxyPaintSetOpt(5)";
        
    iconTextButton -label "RotateZ" 
        -style "iconAndTextHorizontal" 
        -image1 "proxyPaintTool_rotateZ.xpm" 
        -c "proxyPaintSetOpt(6)";
        
    iconTextButton  -label "RotateX" 
        -style "iconAndTextHorizontal" 
        -image1 "proxyPaintTool_rotateX.xpm"
        -c "proxyPaintSetOpt(7)";
        
	iconTextButton -label "Rand Scale" 
	                    -image1 "proxyPaintTool_randscale.xpm" 
	                    -style "iconAndTextHorizontal" 
	                    -c "proxyPaintSetOpt(13)";
	
	iconTextButton -label "Rand Rotate" 
                        -image1 "randomrotate.xpm" 
                        -style "iconAndTextHorizontal" 
                        -c "proxyPaintSetOpt(15)";
                        
    iconTextButton -label "Rand Move" 
                        -image1 "randommove.xpm" 
                        -style "iconAndTextHorizontal" 
                        -c "proxyPaintSetOpt(14)";
                        
    iconTextButton -label "Pull" 
	                    -image1 "proxyPaintTool_up.xpm" 
	                    -style "iconAndTextHorizontal" 
	                    -c "proxyPaintSetOpt(17)";
	
	iconTextButton -label "Push" 
                        -image1 "proxyPaintTool_down.xpm" 
                        -style "iconAndTextHorizontal" 
                        -c "proxyPaintSetOpt(18)";
                        
    iconTextButton -label "Flat" 
                        -image1 "proxyPaintTool_flat.xpm" 
                        -style "iconAndTextHorizontal" 
                        -c "proxyPaintSetOpt(107)";
                        
        iconTextButton -label "Right Up" 
                        -image1 "arrowup.xpm" 
                        -style "iconAndTextHorizontal" 
                        -c "proxyPaintSetOpt(16)";
     setParent ..;
    setParent ..;
     
    frameLayout -l "Clear" 
        -cl false -cll true -p $coln;
    rowColumnLayout -numberOfColumns 2
		-columnWidth 1 140
		-columnWidth 2 140;
		
    iconTextButton -label "Clear Typed" 
                        -image1 "filter.xpm" 
                        -style "iconAndTextHorizontal" 
                        -c "proxyPaintSetOpt(106)";
		iconTextButton -label "Clear All"
			    -style "iconAndTextHorizontal" 
			    -image1 "proxyPaintTool_clear.xpm"  
			    -c "proxyPaintReset";
	setParent ..;
	setParent ..;
	
	frameLayout -l "Cache" 
        -cl false -cll true -p $coln;
    rowColumnLayout -numberOfColumns 2
		-columnWidth 1 140
		-columnWidth 2 140;
		
		iconTextButton -label "Load"
			    -style "iconAndTextHorizontal" 
			    -image1 "generic_load.xpm"  
			    -c "proxyPaint_loadCache";
		
		iconTextButton -label "Save" 
                -image1 "generic_save.xpm" 
                -style "iconAndTextHorizontal" 
                -c "proxyPaint_saveCache";		
			    
	setParent ..;
	setParent ..;
}

global proc proxyPaintCreateInjectUI(string $coln)
{
    iconTextButton -label "Inject Transform" 
        -style "iconAndTextHorizontal" 
        -image1 "generic_inject.png" 
        -p $coln
        -c "proxyPaintSetOpt(98)";
                    
    iconTextButton -label "Inject Particle" 
        -style "iconAndTextHorizontal" 
        -image1 "proxyPaintTool_injectParticle.xpm" 
        -p $coln
        -c "proxyPaintSetOpt(97)";
                    
    checkBox -label "Stick to Ground" 
        -v 1 
        -p $coln
        -cc "proxyPaintSetStickToGround(`checkBox -q -value proxyPaintUICheck_stg`)" 
        proxyPaintUICheck_stg;

    intSliderGrp -label "Num Instance Groups" 
        -field true
    -minValue 1 -maxValue 8
    -fieldMinValue 1 -fieldMaxValue 100
    -value 1
	-cw 1 130
	-cc "proxyPaintSetInstanceGroupCount(`intSliderGrp -q -value proxyPaintSlider_instanceGroupCount`)" 
	-p $coln
	proxyPaintSlider_instanceGroupCount;
	iconTextButton -label "Extract Selected" 
	-style "iconAndTextHorizontal" 
	-image1 "proxyPaintTool_extract.xpm" 
	-p $coln
	-c "proxyPaintSetOpt(102)";  

}

global proc proxyPaintCreateSampleMeshUI(string $coln)
{    
    rowColumnLayout -p $coln -numberOfColumns 2
        -cw 1 310
        -cw 2 200;
        
    string $sels[] = `ls -sl`;
    int $nsel = size($sels);
    int $i, $j;
    for($i=0; $i<$nsel; $i++) {
        string $meshes[] = `listRelatives -ad -type mesh $sels[$i]`;
        int $nmsh = size($meshes);
        for($j=0; $j<$nmsh; $j++) {
            
            string $colstr = proxyPaintGetSampleMeshColor($meshes[$j]);
            string $imgstr = proxyPaintGetSampleMeshImage($meshes[$j]);
            
            textField -text $meshes[$j];
            
            string $pxpnSampleMeshColEdit = `colorSliderGrp
                -ann $meshes[$j]
                -label ""
                -rgb 0.5 0.5 0.5
                -columnWidth 1 4
                -columnWidth 2 48
                -columnWidth 3 56`;
                
            string $cmd = "colorSliderGrp -e -rgb "+$colstr+" \""+$pxpnSampleMeshColEdit+"\"";
            eval($cmd); 
            $cmd = "proxyPaintSetSampleMeshColor(\""+$pxpnSampleMeshColEdit+"\")";
            colorSliderGrp -e -cc $cmd $pxpnSampleMeshColEdit;
              
            string $pxpnSampleMeshImgEdit = `textField -ann $meshes[$j]
                -text $imgstr`;
            
            $cmd = "proxyPaintSetSampleMeshImage2(\""+$pxpnSampleMeshImgEdit+"\")";
            textField -e -cc $cmd $pxpnSampleMeshImgEdit;
            
            $cmd = "proxyPaintSetSampleMeshImage(\""+$pxpnSampleMeshImgEdit+"\")";
            
            iconTextButton -label "Open EXR Image File"     
                -image "proxyPaintTool_imageFile.xpm" 
                -style "iconAndTextHorizontal"
                -c $cmd;
            
        }
    }
    setParent ..;
    string $locs[];
    for($i=0; $i<$nsel; $i++) {
        $locs = `listRelatives -ad -type locator $sels[$i]`;
    }
    if(size($locs) < 1) {
        return;   
    }
    textFieldGrp -l "Edit Example" -text $locs[0] -p $coln;
}

global proc proxyPaintCreateEditGroundUI(string $vizName, string $row)
{
    string $meshes[] = `listConnections -p on ($vizName+".groundSpace")`;
    int $i;
    for($i=0;$i<size($meshes);$i++) {
        intField -p $row -ed off -v $i;
        
        string $transName = proxyPaintGetAttrNodeName($meshes[$i]);
        
        textField -text $transName
            -p $row;
        
        string $pxpnUIGroundSelCheck = `checkBox -l ""
            -ann $transName
            -p $row
            -v 0`;
        
        string $cmd = "proxyPaintSelGroundCheckedChnaged(\""+$pxpnUIGroundSelCheck+"\")";
        
        checkBox -e -cc $cmd $pxpnUIGroundSelCheck;
        
        $cmd = "proxyPaintReplaceGroundMesh(\""+$vizName+"\", "+$i+")";
        button -l "Replace"
            -p $row
            -c $cmd;
    }
}
